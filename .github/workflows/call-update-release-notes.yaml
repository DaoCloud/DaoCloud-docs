name: Update Project Release Notes

on:
  # Make this workflow reusable
  workflow_call:
    inputs:
      project_repo:
        description: 'Project to update release notes for (e.g., spidernet-io/spiderpool)'
        required: true
        type: string
      component:
        description: 'component of the project (e.g., network)'
        required: true
        type: string
      min_version:
        description: 'Minimum version to sync from (e.g., v0.6.0)'
        required: false
        type: string
        default: 'v0.6.0'
  
  # Also allow manual triggering
  workflow_dispatch:
    inputs:
      project_repo:
        description: 'Project to update release notes for (e.g., spidernet-io/spiderpool)'
        required: true
        default: 'spidernet-io/spiderpool'
      min_version:
        description: 'Minimum version to sync from (e.g., v0.6.0)'
        required: false
        default: 'v0.6.0'
      component:
        description: 'component of the project (e.g., network)'
        required: true
        type: string

jobs:
  update-release-notes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup environment
        id: env
        run: |
          # Handle inputs from both workflow_call and workflow_dispatch
          PROJECT_REPO="${{ inputs.project_repo || github.event.inputs.project_repo }}"
          IFS='/' read -r owner repo <<< "$PROJECT_REPO"
          if [ -z "$owner" ] || [ -z "$repo" ]; then 
            echo "Can't find owner and repo for $PROJECT_REPO" 
            exit 1
          fi
          echo "repo_owner=$owner" >> $GITHUB_ENV
          echo "repo_name=$repo" >> $GITHUB_ENV
          echo "component=${{ inputs.component || github.event.inputs.component }}" >> $GITHUB_ENV
          mkdir -p "docs/en/docs/${component}/modules/$repo/release-notes"
          mkdir -p "docs/zh/docs/${component}/modules/$repo/release-notes"

      - name: Check for changes
        id: check_changes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME: ${{ env.repo_name }}
        run: |
          set -x
          set -e
          # Check if there are already open PRs for this project's release notes
          # Look for PRs that match both the title pattern and have the 'documentation' label
          existing_prs=$(gh pr list --repo ${{ github.repository }} --json title,labels,headRefName --jq '.[] | select(.title == "docs: auto update '"$REPO_NAME"' release notes" and (.labels | map(.name) | contains(["auto-sync-release-notes"]))) | .headRefName')
          echo "DEBUG: existing_prs value: '$existing_prs'"
          if [[ -n "$existing_prs" ]]; then
            echo "Found existing auto-generated PRs for $REPO_NAME release notes. Skipping PR creation."
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "No existing auto-generated PRs found for $REPO_NAME release notes. Creating PR."
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Update release notes
        if: steps.check_changes.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_REPO: ${{ inputs.project_repo || github.event.inputs.project_repo }}
          PROJECT_NAME: ${{ env.repo_name }}
          PROJECT_EN_RELEASE_NOTES_PATH: docs/en/docs/${{ env.component }}/modules/${{ env.repo_name }}/release-notes
          PROJECT_ZH_RELEASE_NOTES_PATH: ""
          MIN_SYNC_RELEASE_PROJECT_VERSION: ${{ inputs.min_version || github.event.inputs.min_version }}
        run: |
          ./scripts/release.sh

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'docs: auto update ${{ env.repo_name }} release notes'
          title: 'docs: auto update ${{ env.repo_name }} release notes'
          body: |
            This PR updates the ${{ env.repo_name }} release notes with the latest versions.

            Auto-generated by the Update Project Release Notes workflow.
          branch: update-${{ env.repo_name }}-release-notes-${{ github.run_id }}-${{ github.run_number }}
          base: main
          labels: documentation,auto-sync-release-notes
          delete-branch: true
